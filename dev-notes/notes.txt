

market taker
    - taker source
    - taker destination
market maker
    - maker source
    - maker destination
mint / program
    - a -> taker source -> maker destination
    - b -> maker source -> taker destination

INSTRUCTIONS:
-- USER
:: ExecutionMarketOrder 
    :: INPUT
        - type:                 Order{Buy, Sell},
        - fill:                 Fill{Partial(target_price), Full}
        - target:               Order{Source, Destination}
        - target_amount:        u64,
    :: ACCOUNTS
        - config                []          OrderBookConfig
        - market_pointer        [w]         MarketPointer
        - signer                [s, w]      AccountInfo
        - taker_source          []          TokenAccount
        - taker_destination     []          TokenAccount
        - order_position        []          OrderPosition           -- maybe last order position, apply validations
        - next_order_position   []          Option<OrderPosition>   -- optional if order position ptr is None
    :: VALIDATIONS
        - market_pointer.config == config,
        - market_pointer.is_avialable || market_pointer.state.slot_delta() >= slot_target_delta
        - taker_source.owner == signer || taker_source.delegate == signer
        - taker_stats.owner == signer
        - taker_destination.owner == signer
        - if -> (target == Source && taker_source.amount >= target_amount)
        - if -> fill == Partial 
            && ((type == Sell && order_position.price >= target_price) || (type == Buy && order_position.price <= target_price))
            -> ensure have correct order_position
    :: PROCESS
        - market_pointer [state]
            - is_avialable = false
            - slot = latest_slot
            - position.current = signer
            - posiiton.order_type = order_type
            - position.fill = fill
            - position.target = target
            - posiiton.target_amount = target_amount
            - posiiton.source = taker_source
            - posiiton.destination = taker_destination

-- USER 
:: ReturnExcutionMarketOrder
    :: ACCOUNTS
        - config                []          OrderBookConfig
        - market_pointer        [w]         MarketPointer
        - signer                [s, w]      AccountInfo
    :: VALIDATIONS
        - market_pointer.config == config,
        - maker_pointer.is_executing() == true,
        - market_pointer.current == signer,
    :: PROCESS
        - market_pointer [state] --> clear state
            - is_avialable = true
            - slot = latest_slot
            - position = None

-- USER
:: FillOrderPosition
    :: ACCOUNTS
        - config                    []          OrderBookConfig
        - signer                    [s,w]       AccountInfo
        - token_program_a           []          TokenProgram
        - token_program_b           []          TokenProgram
        - token_mint_a              []          TokenMint
        - token_mint_b              []          TokenMint
        - taker_source              [w]         TokenAccount    
        - maker_destination         [w]         TokenAccount    
        - maker_source              [w]         TokenAccount
        - taker_destination         [w]         TokenAccount   
        - market_pointer            [w]         MarketPointer
        - order_position            [w]         OrderPosition
        - fee_collector             [w]         TokenAccount
    :: VALIDATIONS
        - market_pointer.config == config
        - market_pointer.current == signer
        - market_pointer.ptr == order_position
        - market_pointer.source == taker_source
        - market_pointer.destination == taker_destination
        - order_position.config == config
        - order_position.source == maker_source
        - order_position.destination = maker_destination
        - config.token_mint_a == token_mint_a
        - config.token_mint_b == token_mint_b
        - config.token_program_a == token_program_a
        - config.token_program_b == token_program_b
        - config.fee_account == fee_collector
    :: PROCESS
        - compute amount
        - compute fee
        - transfer amount + fee     -> taker_source -> maker_destination
        - transfer amount           -> maker_source -> taker_destination
        - transfer fee              -> taker_source -> fee_vault
        - market_pointer [state]
            - ptr = order_position.next_order_position

-- ADMIN
:: CreateTradePair
    ::INPUT
        - is_reverse:        bool,
    :: ACCOUNTS
        - authority | administrator     [s]     AccountInfo
        - config                        [w]     OrderBookConfig
        - token_program_a               []      TokenProgram
        - token_program_b               []      TokenProgram
        - token_mint_a                  []      TokenMint
        - token_mint_b                  []      TokenMint
        - system_program                []      SystemProgram
    :: VALIDATIONS
        - authority == AUTH_ID
        - config.owner == authority
        - token_mint_a < token_mint_b
        - token_mint_a.owner == token_program_a
        - token_mint_b.owner == token_program_b
        - fee_account_a.token_mint == token_mint_a
        - fee_account_b.token_mint == token_mint_b
    :: PROCESS
        - create account -> config
        - assign as config
        - config [state]
            - token_program_a
            - token_program_b
            - token_mint_a
            - token_mint_b
            - fee_account_a
            - fee_account_b

-- ADMIN
:: CreateMarketPointer
    :: INPUTS 
        - type:         Order{Buy, Sell},
    :: ACCOUNTS
        - config                        []          OrderBookConfig
        - market_pointer                [w]         MarketPointer
        - authority / signer / payer    [s, w]      AccountInfo
        - system_program                []          SystemProgram
    :: VALIDATIONS
        - config.owner == authority
    :: PROCESS
        - market_pointer [state]
            -

-- USER
:: CreateOrderVault [source, destination]
    :: ACCOUNTS
        - config            []          OrderBookConfig
        - order_escrow      [w]         TokenAccount
        - token_mint        []          TokenMint
        - signer            [s, w]      AccountInfo
        - system_program    []          SystemProgram
    :: VALIDATIONS
        - config.token_mint_a == token_mint || config.token_mint_b == token_mint
    :: PROCESS
        - create account
        - assing as token account

-- USER
:: CreateOrderPosition
    :: INPUT
        - order type:           Order{Buy, Sell},
        - price:                u64,
        - amount:               u64,
    :: ACCOUNTS
        - signer / payer            [s, w]  AccountInfo
        - config                    []      OrderBookConfig
        - order_position_config     []      OrderPositionConfig
        - order_position            [w]     OrderPosition
        - token_mint_a              []      TokenMint
        - token_mint_b              []      TokenMint
        - capital_source            [w]     TokenAccount
        - source                    [w]     TokenAccount
        - destination               []      TokenAccount
        - token_program_a           []      TokenProgram
        - token_program_b           []      TokenProgram
        - system_program            []      SystemProgram
    :: VALIDATIONS
        - capital_source.owner == signer
        - order_position_config.owner == signer
    :: PROCESS
        - create account -> order_position
        - order_position_config.inc()
        - order_position [state]
            - source = source
            - destination = destination
            - price = price
            - amount = amount
            - order_type = order_type
        - transfer
            - amount => capital_source -> source

-- USER
:: OpenOrderPosition
    :: ACCOUNTS
        - config                []          OrderBookConfig
        - market_pointer        [w] | []    MarketPointer
        - prev_order_position   [w],        Option<OrderPosition>
        - next_order_position   [w],        Option<OrderPosition>
        - order_position        [w]         OrderPosition
        - signer / payer        [s, w]      AccountInfo
    :: VALIDATIONS
        - market_pointer.config == config
        - order_position.config == config
        - prev_order_postion != None && market_pointer.ptr != None
            && (( order_position.order_type == Sell && order_position.price  ))

-- USER
:: UpdateOrderPosition
    :: INPUT
        - amount:   Option<u64>,
        - price:    Option<u64>,
    :: ACCOUNTS
        - market_pointer            [w] | []    MarketPointer
        - old_prev_order_position   [w]         Option<OrderPosition>
        - old_next_order_position   [w]         Option<OrderPosition>
        - new_prev_order_position   [w]         Option<OrderPosition>
        - new_next_order_position   [w]         Option<OrderPosition>
        - order_position            [w]         OrderPosition
        - capital_source            [w]         TokenAccount
        - source                    [w]         TokenAccount
        - signer / payer            [s, w]      AccountInfo
        - config                    []          OrderBookConfig 
    :: VALIDATIONS
        - order_position.owner == signer
    :: PROCESS
        - market_pointer [state]
            - || ptr = order_type || order_type.next_order_position
        - order_position [state]
            - || price = price
            - || amount = amount
            - || next_order_position = new_next_order_position
            - || new_prev_order_position.next_order_position = order_position
            - || old_prev_order_position.next_order_position = order_position.next_order_position
        - || transfer -> capital_source -> source
        - || transfer -> source -> capital_source

-- USER
:: CancelOrderPosition
    :: ACCOUNTS
        - market_pointer        [w] | []    MarketPointer
        - prev_order_position   [w]         Option<OrderPosition>
        - next_order_position   [w]         Option<OrderPosition>
        - order_position        [w]         OrderPosition
        - signer / payer        [s, w]      AccountInfo
        - config                []          OrderBookConfig
    :: VALIDATIONS
        - order_position.owner == signer
    :: PROCESS
        -   IF          order_position.next_order_position == None && prev_order_postion != None && prev_order_postion.next_order_position == order_position
            THEN        prev_order_postion.next_order_position = None
            ELSE IF     market_pointer.ptr == order_position && order_position.next_order_position == next_order_position
            THEN        maker_pointer.ptr = next_order_position
            ELSE IF     prev_order_postion != None && next_order_position != None && prev_order_postion.next_order_position == order_position && order_position.next_order_position == next_order_position
            THEN        prev_order_postion.next_order_position = next_order_position
            ELSE        THROW ERROR

-- USER
:: CreateOrderPositionConfig
    :: ACCOUNTS
        - order_book_config         []      OrderBookConfig
        - signer                    [s]     AccountInfo
        - order_position_config     [w]     OrderPositionConfig
        - system_program            []      SystemProgram
    :: PROCESS
        - create account -> order_position_config
        - order_position_config [state]
            - order_book_config
            - owner = signer
            - nonce = 0



STATE ACCOUNTS:
:: OrderBookConfig:
    :: SEED 
        - token_mint_a
        - token_mint_b
        - "order-book-config"
    :: VALIDATIONS
        - token_mint_a < token_mint_b
    :: STATE
        - authority             PubKey,             AccountInfo
        - token_program_a:      PubKey,             TokenProgram
        - token_program_b:      PubKey,             TokenProgram
        - token_mint_a:         PubKey,             TokenMint
        - token_mint_b:         PubKey,             TokenMint
        - sell_market_ptr:      Option<PubKey>,     OrderPosition
        - buy_market_ptr:       Option<PubKey>,     OrderPosition
        - sell_fee_vault:       PubKey,             TokenAccount,
        - buy_fee_vault:        PubKey,             TokenAccount,
        - taker_fee_rate:       u64,
        - maker_fee_rate:       u64,
        - is_reverse:           bool,

:: OrderPositionConfig:
    :: SEED
        - signer
        - config
        - "order-position-config"
    :: CHEKCS
        - owner == signer
    :: METHODS
        - nonce += 1
    :: STATE
        - config:   PubKey
        - owner:    PubKey,
        - nonce:    u64,

:: OrderPosition
    :: SEED
        - order_position_config.nonce
        - signer
        - order_book_config
        - "order-position"
    :: VALIDATIONS
        - order_config.owner == signer
        - order_config.config == config
        - market_pointer.type == order_position.type
        - !config.is_reverse && type == Buy || config.is_reverse && type == Sell
            - destination.token_mint == config.token_mint_a
            - source.token_mint == config.token_mint_b
        - !config.is_reverse && type == Sell || config.is_reverse && type == Buy
            - destination.token_mint == config.token_mint_b
            - source.token_mint == config.token_mint_a
    :: STATE
        - order_book_config:            PubKey,                 OrderBookConfig,
        - order_position_config:        PubKey,                 OrderPositionConfig,
        - type:                         Order{Buy, Sell},
        - price:                        u64,
        - aount:                        u64,
        - is_avialable:                 bool,
        - next_order_position:          Option<PubKey>,         OrderPosition,
        - timestamp:                    u64,
        - slot:                         u64,
        - source:                       PubKey,                 TokenAccount,
        - destination:                  Pubkey,                 TokenAccount,

:: MarketPointer:
    :: SEED 
        - type
        - config
        - "market-pointer"
    :: VALIDATIONS
        - market_pointer.type == order_position.type
    :: STATE
        - config:               PubKey,                         OrderBookConfig,
        - type:                 Order{Buy, Sell},
        - ptr:                  Option<PubKey>,                 OrderPosition,
        - timestamp:            u64,
        - slot:                 u64,
        - fill_order:           Option<ExecuteMarketOrder>

-> ExecuteMarketOrder
    :: STATE
        - type:             Order{Buy, Sell},
        - fill:             Fill{Partial(target_price: u64), Full}
        - target_amount:    u64,
        - collected_amount: u64,
        - owner:            PubKey,         AccountInfo,



ESCROWS:
:: OrderEscrow
    :: SEED
        - config
        - token_mint
        - signer
        - "order-escrow"
    :: VALIDATIONS
        - config.token_mint_a == token_mint || config.token_mint_b == token_mint
    :: OWNER

:: FeeVault
    :: SEED
        - config
        - token_mint
        - "fee-vault"
    :: VALIDATIONS
        - config.token_mint_a == token_mint || config.token_mint_b == token_mint
    :: OWNER



Question::
- do I need an observer?

Notes:
- one token mint is the quote mint
- one token mint is the base mint
- right now there is no way to differaintate that
- only sorting from lower token mint to greater token mint -> a -> b
--> for now will not support multisig



// prev_order_position
// new_order_position
// next_order_position

// prev_order_position.next_order_position = new_order_position.key()
// new_order_position.next_order_position = next_order_position.key()

// ASK
//  price 11, size 1 <- market pointer 
//  price 12, size 5,
//  price 13, size 4,
//  price 14, size 10, 

// market taker
//  buy 10 tokens

// transaction 1 -> create market order -> chagnes the flag to executing

// stop sending
// transaction 2 -> execute market order -> pay 10 USDC, receive 1 token, market pointer updates pointing to the next order position
// transaction 3 -> execute market order -> pay 40 USDC, receive 5 token, same thing happens here
// transaction 4 -> execute market order -> pay 28 USDC, receive 4 token, same thing happens here
// transaction 5 -> change the flag to avaialbe

// algo -> de 